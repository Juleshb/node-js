displayFile("<div class=\"file\">\n  <h2 id=\"lib/instrument.js\"> lib/instrument.js</h2>\n  <div id=\"stats\">\n    <div class=\"linecoverage\">\n      <span class=\"linecov high\">\n        [96.83%]\n      </span>\n      <span>61/63<span>\n      <span class=\"misses\">\n        2\n      </span>\n    </div>\n    <div class=\"branchcoverage\">\n      <span class=\"branchcov high\">\n        [97.56%]\n      </span>\n      <span>40/41</span>\n      <span class=\"misses\">\n        1\n      </span>\n    </div>\n  </div>\n  <table id=\"source\">\n    <thead>\n      <tr>\n        <th>Line</th>\n        <th>Hits</th>\n        <th>Source</th>\n      </tr>\n    </thead>\n    <tbody>\n      \n      \n      \n        \n        \n            <tr>\n              <td class=\"line\">1</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/*!</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">2</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * jscoverage: lib/instrument.js</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">3</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">4</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Create   : 2014-04-03 15:20:13</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">5</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * CopyRight 2014 (c) Fish And Other Contributors</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">6</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">7</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">8</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * instrument code</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">9</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * @example</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">10</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *   var ist = new Instrument();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">11</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *   var resCode = ist.process(str);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">12</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">13</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var debug = require('debug')('cov:instrument');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">14</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var Uglify = require('uglify-js');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">15</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">16</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function Instrument() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">17</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">18</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * filename needed</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">19</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @type {String}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">20</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">21</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  this.filename = null;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">22</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">23</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * store injected code</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">24</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @type {String}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">25</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">26</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  this.code = null;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">27</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">28</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * 储存line信息</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">29</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @type {Array}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">30</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">31</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  this.lines = [];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">32</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">33</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * 储存condition信息</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">34</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @type {Object}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">35</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">36</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  this.conds = {};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">37</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">38</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * source code in array</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">39</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @type {Array}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">40</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">41</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  this.source = null;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">42</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">43</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">44</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">Instrument.prototype = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">45</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  // 行类型</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">46</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  T_LINE: 'line',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">47</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  T_COND: 'cond',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">48</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">49</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * process code</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">50</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @public</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">51</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @param  {String} code source code</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">52</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @return {String} injected code</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">53</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">54</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  process: function (filename, code) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">55</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (!filename) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss\">\n              <td class=\"line\">56</td>\n              <td class=\"hits\">0</td>\n              <td class=\"source\">      throw new Error('[jscoverage]instrument need filename!');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">57</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">58</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">59</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    var ist = this;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">60</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // parse ast</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">61</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    var ast = Uglify.parse(code);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">62</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">63</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    this.filename = filename;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">64</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    this.source = code.split(/\\r?\\n/);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">65</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">66</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // init walker</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">67</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    var walker = new Uglify.TreeWalker(function (node) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">68</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (ist.checkIfIgnore(node, walker.stack)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">69</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        return;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">70</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">71</td>\n              <td class=\"hits\">348</td>\n              <td class=\"source\">      var parent = this.parent();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">72</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (node instanceof Uglify.AST_Conditional) { // 三元判断</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">73</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">74</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        node.consequent = ist.inject('cond', node.consequent.start.line, node.consequent);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">75</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        node.alternative = ist.inject('cond', node.alternative.start.line, node.alternative);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">76</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      } else if (node.TYPE === 'Binary') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">77</td>\n              <td class=\"hits\">10</td>\n              <td class=\"source\">        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">78</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (node.operator && ['||', '&&'].indexOf(node.operator) === -1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">79</td>\n              <td class=\"hits\">8</td>\n              <td class=\"source\">          return;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">80</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">81</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!(node.left instanceof Uglify.AST_Constant)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">82</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">          node.left = ist.inject('cond', node.left.start.line, node.left);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">83</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">84</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!(node.right instanceof Uglify.AST_Constant)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">85</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">          node.right = ist.inject('cond', node.right.start.line, node.right);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">86</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">87</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">88</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">89</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      else if (node instanceof Uglify.AST_If) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">90</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">91</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">        node.condition = ist.inject('cond', node.condition.start.line, node.condition);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">92</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">93</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">94</td>\n              <td class=\"hits\">340</td>\n              <td class=\"source\">      var len = node.body ? node.body.length : 0;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">95</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (len) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">96</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        var res = [];</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">97</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        var subNode;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">98</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        for (var i = 0; i < len; i++) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">99</td>\n              <td class=\"hits\">34</td>\n              <td class=\"source\">          subNode = node.body[i];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">100</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          if (ist.checkIfIgnore(subNode, walker.stack)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">101</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">            res.push(subNode);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">102</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">            continue;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">103</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">104</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          if (subNode instanceof Uglify.AST_Statement) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">105</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (ist.ifExclude(subNode)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">106</td>\n              <td class=\"hits\">9</td>\n              <td class=\"source\">              res.push(subNode);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">107</td>\n              <td class=\"hits\">9</td>\n              <td class=\"source\">              continue;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">108</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">109</td>\n              <td class=\"hits\">24</td>\n              <td class=\"source\">            res.push(ist.inject('line', subNode.start.line));</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss-branch\">\n              <td class=\"line\">110</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          } else if (<i class=\"cond-miss\">subNode instanceof Uglify.AST_Var</i>) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss\">\n              <td class=\"line\">111</td>\n              <td class=\"hits\">0</td>\n              <td class=\"source\">            res.push(ist.inject('line', subNode.start.line));</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">112</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">113</td>\n              <td class=\"hits\">24</td>\n              <td class=\"source\">          res.push(subNode);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">114</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">115</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        node.body = res;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">116</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">117</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">118</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // figure_out_scope</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">119</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    ast.figure_out_scope();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">120</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // walk process</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">121</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    ast.walk(walker);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">122</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">123</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    var out = Uglify.OutputStream({</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">124</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      preserve_line : true,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">125</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      comments: 'all',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">126</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      beautify: true</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">127</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">128</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // rebuild file</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">129</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    ast.print(out);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">130</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    this.code = out.toString();</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">131</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">    return this;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">132</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">133</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">134</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * 注入覆盖率查询方法</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">135</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @private</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">136</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @param  {String} type  inject type, line | conds</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">137</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @param  {Number} line  line number</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">138</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @param  {Object} expr  any expression, or node, or statement</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">139</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @return {AST_Func} Object</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">140</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">141</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  inject: function (type, line, expr) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">142</td>\n              <td class=\"hits\">35</td>\n              <td class=\"source\">    var args = [];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">143</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (type === this.T_LINE) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">144</td>\n              <td class=\"hits\">24</td>\n              <td class=\"source\">      this.lines.push(line);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">145</td>\n              <td class=\"hits\">24</td>\n              <td class=\"source\">      args = [</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">146</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_String({value: this.filename}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">147</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_String({value: type}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">148</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_Number({value: line})</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">149</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      ];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">150</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    } else if (type === this.T_COND) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">151</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      var start = expr.start.col;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">152</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      var offset = expr.end.endpos - expr.start.pos;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">153</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      var key = line + '_' + start + '_' + offset;  // 编码</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">154</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      this.conds[key] = 0;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">155</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      args = [</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">156</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_String({value: this.filename}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">157</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_String({value: type}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">158</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        new Uglify.AST_String({value: key}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">159</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        expr</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">160</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      ];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">161</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">162</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">163</td>\n              <td class=\"hits\">35</td>\n              <td class=\"source\">    var call = new Uglify.AST_Call({</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">164</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      expression: new Uglify.AST_SymbolRef({name: '_$jscmd'}),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">165</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      //end: new Uglify.AST_</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">166</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      args: args</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">167</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">168</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">169</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (type === this.T_LINE) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">170</td>\n              <td class=\"hits\">24</td>\n              <td class=\"source\">      return new Uglify.AST_SimpleStatement({</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">171</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        body: call,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">172</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        end: new Uglify.AST_Token({value: ';'})</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">173</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">174</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">175</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">      return call;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">176</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">177</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">178</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">179</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * check if need inject</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">180</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @param  {AST_Node} node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">181</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   * @return {Boolean}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">182</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">   */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">183</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  ifExclude: function (node) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">184</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (node instanceof Uglify.AST_LoopControl) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">185</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">      return false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">186</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">187</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">188</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      node instanceof Uglify.AST_IterationStatement ||</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">189</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      node instanceof Uglify.AST_StatementWithBody ||</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">190</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      node instanceof Uglify.AST_Block</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">191</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    ) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">192</td>\n              <td class=\"hits\">9</td>\n              <td class=\"source\">      return true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">193</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">194</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">195</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  checkIfIgnore: function (node, stack) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">196</td>\n              <td class=\"hits\">386</td>\n              <td class=\"source\">    var cmt;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">197</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (node.start && node.start.comments_before.length) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">198</td>\n              <td class=\"hits\">16</td>\n              <td class=\"source\">      cmt = node.start.comments_before[node.start.comments_before.length - 1];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">199</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (/@covignore/.test(cmt.value) && !(node instanceof Uglify.AST_Toplevel)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">200</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        node.__covignore = true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">201</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">202</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">203</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (node.__covignore) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">204</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">      return true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">205</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">206</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (stack) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">207</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      for (var i = stack.length - 1; i > 0; i--) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">208</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (stack[i].__covignore) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">209</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">          return true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">210</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">211</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">212</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">213</td>\n              <td class=\"hits\">381</td>\n              <td class=\"source\">    return false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">214</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">215</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">216</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">217</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">module.exports = Instrument;</td>\n            </tr>\n        \n      \n    </tbody>\n  </table>\n</div>");