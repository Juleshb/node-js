displayFile("<div class=\"file\">\n  <h2 id=\"lib/patch.js\"> lib/patch.js</h2>\n  <div id=\"stats\">\n    <div class=\"linecoverage\">\n      <span class=\"linecov high\">\n        [100%]\n      </span>\n      <span>21/21<span>\n      <span class=\"misses\">\n        0\n      </span>\n    </div>\n    <div class=\"branchcoverage\">\n      <span class=\"branchcov high\">\n        [100%]\n      </span>\n      <span>3/3</span>\n      <span class=\"misses\">\n        0\n      </span>\n    </div>\n  </div>\n  <table id=\"source\">\n    <thead>\n      <tr>\n        <th>Line</th>\n        <th>Hits</th>\n        <th>Source</th>\n      </tr>\n    </thead>\n    <tbody>\n      \n      \n      \n        \n        \n            <tr>\n              <td class=\"line\">1</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/*!</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">2</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * jscoverage: lib/patch.js</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">3</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">4</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Create   : 2014-04-03 15:20:13</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">5</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * CopyRight 2014 (c) Fish And Other Contributors</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">6</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">7</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var Module = require('module');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">8</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var path = require('path');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">9</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var fs = require('fs');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">10</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var argv = require('optimist').argv;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">11</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var jscoverage = require('./jscoverage');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">12</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">13</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var covInject = false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">14</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var defaultCovIgnore = [</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">15</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  new RegExp('^' + process.cwd() + '/node_modules/'),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">16</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  new RegExp('^' + process.cwd() + '/test/')</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">17</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">];</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">18</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var covIgnore = defaultCovIgnore;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">19</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">20</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var injectFunctions = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">21</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  get : '_get',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">22</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  replace : '_replace',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">23</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  call : '_call',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">24</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  reset : '_reset',</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">25</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  test: '_test'</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">26</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">27</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">28</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.getInjectFunctions = function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">29</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  return injectFunctions;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">30</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">31</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">32</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.enableInject = function (bool) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">33</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  covInject = bool;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">34</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">35</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.setCovIgnore = function (ignore, bool) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">36</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (bool) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">37</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    covIgnore = ignore;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">38</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">39</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    covIgnore = ignore.concat(defaultCovIgnore);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">40</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">41</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">42</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">43</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * do mock things here</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">44</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * @covignore</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">45</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">46</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">(function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">47</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (Module.prototype.__jsc_patch__) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">48</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">49</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">50</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  Module.prototype.__jsc_patch__ = true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">51</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  var origin_require = Module.prototype.require;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">52</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  var processExts = ['.js', '.coffee', '.litcoffee'];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">53</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  Module.prototype.require = function (filename) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">54</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var needinject = covInject;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">55</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var ff = filename;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">56</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    filename = Module._resolveFilename(filename, this);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">57</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var ext = path.extname(filename);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">58</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var flagjsc = checkModule(filename);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">59</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (typeof filename  === 'object') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">60</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      filename = filename[0];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">61</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">62</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (!flagjsc || processExts.indexOf(ext) === -1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">63</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      return origin_require.call(this, filename);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">64</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">65</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">66</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var cachedModule = Module._cache[filename];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">67</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // take care of module cache</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">68</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (flagjsc && cachedModule && cachedModule.__coveraged__) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">69</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      return cachedModule.exports;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">70</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">71</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // console.log('jscoverage:', ff, 'cov', flagjsc, 'inject', needinject);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">72</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var module = new Module(filename, this);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">73</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    try {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">74</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module.filename = filename;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">75</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module.paths = Module._nodeModulePaths(path.dirname(filename));</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">76</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      Module._extensions[ext](module, filename, {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">77</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        flagjsc : flagjsc,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">78</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        needinject : needinject</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">79</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">80</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module.__coveraged__ = flagjsc;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">81</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module.loaded = true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">82</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      Module._cache[filename] = module;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">83</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    } catch (err) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">84</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      delete Module._cache[filename];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">85</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      console.error(filename, err.stack);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">86</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      throw err;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">87</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">88</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return module.exports;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">89</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">90</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  function stripBOM(content) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">91</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">92</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // because the buffer-to-string conversion in `fs.readFileSync()`</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">93</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // translates it to FEFF, the UTF-16 BOM.</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">94</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (content.charCodeAt(0) === 0xFEFF) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">95</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      content = content.slice(1);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">96</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">97</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return content;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">98</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">99</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  Module._extensions['.js'] = function (module, filename, status) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">100</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var content = fs.readFileSync(filename, 'utf8');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">101</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var tmpFuncBody;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">102</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var injectFn = exports.getInjectFunctions();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">103</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // trim first line when script is a shell script</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">104</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    // content = content.replace(/^\\#\\![^\\n]+\\n/, '');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">105</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (status && status.flagjsc) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">106</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      content = jscoverage.process(filename, content);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">107</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">108</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (status && status.needinject) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">109</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      tmpFuncBody = injectFunctionBody.toString().replace(/\\$\\$(\\w+)\\$\\$/g, function (m0, m1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">110</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return injectFunctions[m1];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">111</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">112</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      tmpFuncBody = tmpFuncBody.split(/\\n/);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">113</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      content += '\\n' + tmpFuncBody.slice(1, tmpFuncBody.length - 1).join('\\n');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">114</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">115</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    module._compile(stripBOM(content), filename);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">116</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">117</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (Module._extensions['.coffee']) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">118</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    Module._extensions['.coffee'] = Module._extensions['.litcoffee'] = function (module, filename, status) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">119</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var CoffeeScript = require('coffee-script');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">120</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var content = CoffeeScript._compileFile(filename, false);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">121</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var tmpFuncBody;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">122</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var injectFn = exports.getInjectFunctions();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">123</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      // trim first line when script is a shell script</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">124</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      // content = content.replace(/^\\#\\![^\\n]+\\n/, '');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">125</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (status && status.flagjsc) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">126</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        content = jscoverage.process(filename, content);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">127</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">128</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (status && status.needinject) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">129</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        tmpFuncBody = injectFunctionBody.toString().replace(/\\$\\$(\\w+)\\$\\$/g, function (m0, m1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">130</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          return injectFunctions[m1];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">131</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">132</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        tmpFuncBody = tmpFuncBody.split(/\\n/);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">133</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        content += '\\n' + tmpFuncBody.slice(1, tmpFuncBody.length - 1).join('\\n');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">134</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">135</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module._compile(stripBOM(content), filename);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">136</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">137</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">138</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">})();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">139</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">140</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function checkModule(module) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">141</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  // native module</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">142</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (!/\\//.test(module)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">143</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    return false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">144</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">145</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">146</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  // modules in node_modules</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">147</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">  var flagIgnore = false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">148</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">  covIgnore.forEach(function (v) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">149</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (v.test(module)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">150</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">      flagIgnore = true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">151</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">152</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">153</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">  return !flagIgnore;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">154</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">155</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">156</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">157</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * do not exec this function</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">158</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * @covignore</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">159</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">160</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function injectFunctionBody() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">161</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  (function (){</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">162</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (module.exports._i_n_j_e_c_t_e_d_) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">163</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">164</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">165</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (module.exports.$$call$$ || module.exports.$$get$$ ||</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">166</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      module.exports.$$replace$$ || module.exports.$$reset$$) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">167</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    throw new Error(\"[jscoverage] jscoverage can not inject function for this module, because the function is exists! using jsc.config({inject:{}})\");</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">168</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">169</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">170</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  var __r_e_p_l_a_c_e__ = {};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">171</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  module.exports.$$replace$$ = function (name, obj) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">172</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    function stringify(obj) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">173</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (obj === null) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">174</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return 'null';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">175</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">176</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (obj === undefined){</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">177</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return 'undefined';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">178</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">179</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (!obj && isNaN(obj)){</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">180</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return 'NaN';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">181</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">182</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (typeof obj === 'string') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">183</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return '\"' + obj.replace(/\"/g, '\\\\\"') + '\"';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">184</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">185</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (typeof obj === 'number') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">186</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return obj;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">187</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">188</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (obj.constructor === Date) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">189</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return 'new Date(' + obj.getTime() + ')';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">190</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">191</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (obj.constructor === Function) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">192</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return obj.toString();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">193</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">194</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (obj.constructor === RegExp) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">195</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        return obj.toString();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">196</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">197</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var is_array = obj.constructor === Array ? true : false;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">198</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      var res, i;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">199</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      if (is_array) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">200</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        res = ['['];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">201</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        for (i = 0; i < obj.length; i++) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">202</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.push(stringify(obj[i]));</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">203</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.push(',');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">204</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">205</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (res[res.length - 1] === ',') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">206</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.pop();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">207</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">208</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        res.push(']');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">209</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">210</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        res = ['{'];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">211</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        for (i in obj) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">212</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.push(i + ':' + stringify(obj[i]));</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">213</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.push(',');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">214</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">215</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (res[res.length - 1] === ',')</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">216</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          res.pop();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">217</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        res.push('}');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">218</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">219</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      return res.join('');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">220</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">221</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (!__r_e_p_l_a_c_e__.hasOwnProperty(name)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">222</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        __r_e_p_l_a_c_e__[name] = eval(name);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">223</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">224</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    eval(name + \"=\" + stringify(obj));</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">225</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">226</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  module.exports.$$reset$$ = function (name) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">227</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var script;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">228</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (name) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">229</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      script = 'if(__r_e_p_l_a_c_e__.hasOwnProperty(\"' + name + '\"))' + name + ' = __r_e_p_l_a_c_e__[\"' + name + '\"];';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">230</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">231</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      script = 'for(var i in __r_e_p_l_a_c_e__){eval( i + \" = __r_e_p_l_a_c_e__[\\'\" + i + \"\\'];\");}';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">232</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">233</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    eval(script);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">234</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">235</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  module.exports.$$call$$ = module.exports.$$test$$ = function (func, args) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">236</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    var f, o;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">237</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (func.match(/\\\\./)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">238</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      func = func.split(\".\");</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">239</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      f = func[func.length - 1];</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">240</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      func.pop();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">241</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      o = func.join(\".\");</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">242</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">243</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      f = func;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">244</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">      o = \"this\";</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">245</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">246</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return eval(f + \".apply(\" + o + \",\" + JSON.stringify(args) + \")\");</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">247</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">248</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  module.exports.$$get$$ = function (objstr) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">249</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    return eval(objstr);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">250</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  };</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">251</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  module.exports._i_n_j_e_c_t_e_d_ = true;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">252</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">})();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">253</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">254</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n    </tbody>\n  </table>\n</div>");