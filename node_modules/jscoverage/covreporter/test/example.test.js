displayFile("<div class=\"file\">\n  <h2 id=\"test/example.test.js\"> test/example.test.js</h2>\n  <div id=\"stats\">\n    <div class=\"linecoverage\">\n      <span class=\"linecov high\">\n        [100%]\n      </span>\n      <span>62/62<span>\n      <span class=\"misses\">\n        0\n      </span>\n    </div>\n    <div class=\"branchcoverage\">\n      <span class=\"branchcov high\">\n        [100%]\n      </span>\n      <span>17/17</span>\n      <span class=\"misses\">\n        0\n      </span>\n    </div>\n  </div>\n  <table id=\"source\">\n    <thead>\n      <tr>\n        <th>Line</th>\n        <th>Hits</th>\n        <th>Source</th>\n      </tr>\n    </thead>\n    <tbody>\n      \n      \n      \n        \n        \n            <tr>\n              <td class=\"line\">1</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/*!</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">2</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * jscoverage: example.js</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">3</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">4</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * Create   : 2014-04-03 15:20:13</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">5</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> * CopyRight 2014 (c) Fish And Other Contributors</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">6</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">7</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var expect = require('expect.js');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">8</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">9</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testTryCatch = function (a) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">10</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  try {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">11</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    return a.run();</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">12</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  } catch (e) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">13</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    return 'catch error';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">14</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">15</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">16</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">17</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testIfElse = function (a, b, c, d) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">18</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  if (a > 0 && b > 0) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">19</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    return 'ab';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">20</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  } else if (c || d) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">21</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    return 'cd';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">22</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">23</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    return 'unknow';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">24</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">25</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">26</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">27</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testCondition = function (a, b ,c) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">28</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">  return a || b > c ? '1' : '2';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">29</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">30</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">31</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testWhile = function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">32</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  var a = 0;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">33</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  var res = '';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">34</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  while(a < 2) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">35</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    res += 'a';</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">36</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    a ++;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">37</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">38</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  var b = 0;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">39</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  do {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">40</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    res += 'b';</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">41</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    b ++;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">42</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  } while (b < 2);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">43</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  return res;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">44</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">45</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">46</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">47</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">describe('example.js', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">48</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test try catch', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">49</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testTryCatch({})).to.be.match(/catch\\ error/);</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">50</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    expect(exports.testTryCatch({run: function () {return 'run';}})).to.be('run');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">51</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">52</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">53</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test if else', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">54</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testIfElse(1, 0)).to.be('unknow');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">55</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testIfElse(1, 1)).to.be('ab');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">56</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testIfElse(0, 0, 1, 0)).to.be('cd');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">57</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">58</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">59</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test condition', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">60</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testCondition(1)).to.be('1');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">61</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testCondition(0, 2, 1)).to.be('1');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">62</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testCondition(0, 0, 0)).to.be('2');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">63</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">64</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">65</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test while', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">66</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testWhile()).to.be('aabb');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">67</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">68</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">69</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test switch', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">70</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testSwitch('a')).to.be('a');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">71</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testSwitch('b')).to.be('b');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">72</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testSwitch('c')).to.be('c');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">73</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testSwitch('0')).to.be('d');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">74</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">75</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">76</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test for', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">77</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testFor()).to.be(1);</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">78</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">79</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">80</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  it('test binary', function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">81</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testBinary('a')).to.be('a');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">82</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testBinary(null, 'b')).to.be('b');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">83</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testBinary(null, null, null, 'b')).to.be('b');</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">84</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    expect(exports.testBinary(null, null, 'b')).to.be('b');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">85</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  });</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">86</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">});</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">87</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">88</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testSwitch = function (a) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">89</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">  var res = null;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">90</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  switch (a) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">91</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    case 'a':</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">92</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      return 'a';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">93</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    case 'b':</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">94</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      return 'b';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">95</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    case 'c':</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">96</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      res = 'c';</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">97</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      break;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">98</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    default:</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">99</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      res = 'd';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">100</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">101</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">  return res;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">102</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">103</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">104</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testFor = function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">105</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  var a = 0;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">106</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  for (var i = 0; i < 3; i++) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">107</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (i > 1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">108</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">      a ++;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">109</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">110</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">  }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">111</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  return a;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">112</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">113</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">exports.testBinary = function (a, b, c, d) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">114</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">  return a || b || c || d;</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">115</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">};</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">116</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">// anonymous function</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">117</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">(function(){</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">118</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  var a = 1;</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">119</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">  console.log('this line should covered');</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">120</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">})();</td>\n            </tr>\n        \n      \n    </tbody>\n  </table>\n</div>");